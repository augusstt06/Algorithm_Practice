# 2. 버블 정렬
# 선택 정렬과 유사하게 바로 옆에 있는 요소끼리 비교하여 더 작은 숫자를 앞으로 보내는 것을 반복 한다
# 한 번 반복을 끝낼때, 가장 큰 값이 가장 뒤로 간다
# 정렬 알고리즘 중에 가장 효율성이 떨어진다.
# 반복문을 사용할때 뒤에서 부터 돌아야할 요소의 크기가 줄어든다는 점 유의

# 버블 정렬 구현 (오름 차순으로 구현한다)

def f_bubble(arr):
    for i in range(len(arr)):
        # 버블 정렬은 뒤에서 부터 돌아야할 요소의 크기를 줄여 나가므로 arr의 길기 -(i+1)의 범위를 설정한다
        # +1의 이유는 요소의 맨 마지막까지 갈 필요가 없고, 그 전까지만 가면 끝까지 비교가 완료 되므로 설정 (또한 마지막까지 갔을때 +1의 인덱스를 비교하려 하면 범위 오류가 나기 때문)
        for j in range(len(arr)-(i+1)):
            # 만약에 arr의 j번째 요소의 크기가 그 다음 요소, 즉 j+1번째 요소의 크기 보다 크다면
            if arr[j] > arr[j+1]:
                # 자리를 바꾸기 위해 temp라는 임시의 arr의 j번째 요소를 담을 임의의 변수를 설정
                temp = arr[j]
                # arr의 j번째 요소를 arr의 j+1번째 요소로 갱신하고
                arr[j] = arr[j+1]
                # arr의 j+1번째 요소에 arr의 j번째 요소로 갱신한다 (위에 설정한 temp에 arr의 j번째 요소를 담았기에, temp변수를 활용한다)
                arr[j+1] = temp

    # 최종적으로 모든 for문을 돌고 나면 순서가 바뀐 arr를 리턴한다.
    return arr


# arr = [1, 10, 5, 8, 7, 6, 4, 3, 2, 9]
arr = [11, 12, 15, 16, 13, 18, 14, 17, 20, 19]
# arr = [16, 7, 12, 11, 8, 10, 9, 15, 13, 14]
print(f_bubble(arr))